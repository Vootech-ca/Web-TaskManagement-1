<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Exception;
use Symfony\Component\HttpFoundation\Response;

class {{ class }} extends Controller
{
    public function index(Request $request)
    {
        return view('admin.users.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    public function store(UserRequest $request)
    {
        try {
            $store = User::create($request->validated());
            if($store) {
                return response()->noContent(Response::HTTP_CREATED);
            }
            return response()->noContent(Response::HTTP_INTERNAL_SERVER_ERROR);
        } catch (Exception $ex) {
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        }
    }

    public function show($PARAM)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    public function update(UserRequest $request, $PARAM)
    {
        try {
            $update = $PARAM->update($request->validated());
            if($update) {
                return response()->noContent(Response::HTTP_ACCEPTED);
            }
            return response()->noContent(Response::HTTP_INTERNAL_SERVER_ERROR);
        } catch (Exception $ex) {
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        }
    }

    public function destroy($PARAM)
    {
        try {
            if($PARAM->delete()) {
                return response()->noContent(Response::HTTP_OK);
            }
            return response()->noContent(Response::HTTP_INTERNAL_SERVER_ERROR);
        } catch (Exception $ex) {
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        }
    }

    public function multipleDelete(Request $request) {
        try {
            if(count($request->selected) > 0) {
                $selected = User::whereIn('id', $request->selected);
                if($selected->delete()) {
                    return response()->noContent(Response::HTTP_OK);
                }
                return response()->noContent(Response::HTTP_INTERNAL_SERVER_ERROR);
            }
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        } catch (Exception $ex) {
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        }
    }

    public function getOne(Request $request) {
        try {
            $one = User::findOrFail($request->id);
            return response()->json($one, Response::HTTP_OK);
        } catch (Exception $ex) {
            return response()->noContent(Response::HTTP_BAD_REQUEST);
        }
    }
}
